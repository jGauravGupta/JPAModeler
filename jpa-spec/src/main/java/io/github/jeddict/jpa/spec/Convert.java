//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.18 at 01:46:14 PM IST 
//
package io.github.jeddict.jpa.spec;

import io.github.jeddict.jpa.spec.validator.ConvertValidator;
import io.github.jeddict.source.AnnotatedMember;
import io.github.jeddict.source.AnnotationExplorer;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import static java.util.stream.Collectors.toList;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.eclipse.persistence.internal.jpa.metadata.converters.ConvertMetadata;
import org.eclipse.persistence.internal.jpa.metadata.converters.ConverterMetadata;

/**
 *
 *
 * @Target({TYPE, METHOD, FIELD}) @Retention(RUNTIME) public @interface Convert
 * { Class converter() default void.class; String attributeName() default "";
 * boolean disableConversion() default false; }
 *
 *
 *
 * <p>
 * Java class for convert complex type.
 *
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * <pre>
 * &lt;complexType name="convert">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="description" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="converter" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="attribute-name" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="disable-conversion" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "convert", propOrder = {
    "description"
})
@XmlJavaTypeAdapter(value = ConvertValidator.class)
public class Convert implements Comparable<Convert> {

    protected String description;
    @XmlAttribute(name = "c")
    protected String converter;
    @XmlAttribute(name = "a")
    protected String attributeName;
    @XmlAttribute(name = "d")
    protected Boolean disableConversion;

    public static List<Convert> load(AnnotatedMember member) {
        return load(member, false, false);
    }

    public static List<Convert> load(AnnotatedMember member, boolean mapKeyExist, boolean isMapKeyConvert) {
        List<Convert> converts = new ArrayList<>();
        Optional<AnnotationExplorer> convertsOpt = member.getAnnotation(jakarta.persistence.Converts.class);
        if (convertsOpt.isPresent()) {
            converts.addAll(
                    convertsOpt.get()
                            .getAnnotationList("value")
                            .map(convertAnnot -> Convert.load(convertAnnot, mapKeyExist, isMapKeyConvert))
                            .collect(toList())
            );
        } else {
            converts.addAll(
                    member.getRepeatableAnnotations(jakarta.persistence.Convert.class)
                            .map(convertAnnot -> Convert.load(convertAnnot, mapKeyExist, isMapKeyConvert))
                            .collect(toList())
            );
        }
        return converts;
    }

    private static Convert load(AnnotationExplorer annotation, boolean mapKeyExist, boolean isMapKeyConvert) {
        if (annotation != null) {
            final Convert convert = new Convert();
            annotation.getResolvedClass("converter").ifPresent(converter -> {
                convert.setConverter(converter.getQualifiedName());
            });
            annotation.getString("attributeName").ifPresent(convert::setAttributeName);
            annotation.getBoolean("disableConversion").ifPresent(convert::setDisableConversion);

            if (mapKeyExist) {
                if (isMapKeyConvert && (convert.attributeName == null || !convert.attributeName.startsWith("key"))) {
                    return null;
                } else if (!isMapKeyConvert && (convert.attributeName != null && convert.attributeName.startsWith("key"))) {
                    return null;
                }
            }
            return convert;
        }
        return null;
    }

    /**
     * Gets the value of the description property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     *
     * @param value allowed object is {@link String }
     *
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the converter property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getConverter() {
        return converter;
    }

    /**
     * Sets the value of the converter property.
     *
     * @param value allowed object is {@link String }
     *
     */
    public void setConverter(String value) {
        this.converter = value;
    }

    /**
     * Gets the value of the attributeName property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getAttributeName() {
        return attributeName;
    }

    /**
     * Sets the value of the attributeName property.
     *
     * @param value allowed object is {@link String }
     *
     */
    public void setAttributeName(String value) {
        this.attributeName = value;
    }

    /**
     * Gets the value of the disableConversion property.
     *
     * @return possible object is {@link Boolean }
     *
     */
    public Boolean isDisableConversion() {
        if (disableConversion == null) {
            return false;
        }
        return disableConversion;
    }

    /**
     * Sets the value of the disableConversion property.
     *
     * @param value allowed object is {@link Boolean }
     *
     */
    public void setDisableConversion(Boolean value) {
        this.disableConversion = value;
    }

    @Override
    public int compareTo(Convert convert) {
        if (this.attributeName == null) {
            return -1;
        }
        return this.attributeName.compareTo(convert.getAttributeName());
    }

    public ConvertMetadata getAccessor() {
        ConvertMetadata accessr = new ConvertMetadata();
        accessr.setConverterClassName(converter);
        accessr.setAttributeName(attributeName);
        accessr.setDisableConversion(disableConversion);
        return accessr;
    }
    
    public ConverterMetadata getConverterAccessor() {
        ConverterMetadata accessr = new ConverterMetadata();
        accessr.setClassName(converter);
        return accessr;
    }

}
