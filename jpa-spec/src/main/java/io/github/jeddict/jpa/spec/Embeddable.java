//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2014.01.21 at 01:52:19 PM IST
//
package io.github.jeddict.jpa.spec;

import com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration;
import static io.github.jeddict.jcode.JPAConstants.EMBEDDABLE_FQN;
import io.github.jeddict.jpa.spec.extend.ReferenceClass;
import io.github.jeddict.source.ClassExplorer;
import java.util.Optional;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlType;

/**
 *
 *
 * Defines the settings and mappings for embeddable objects. Is allowed to be
 * sparsely populated and used in conjunction with the annotations.
 * Alternatively, the metadata-complete attribute can be used to indicate that
 * no annotations are to be processed in the class. If this is the case then the
 * defaulting rules will be recursively applied.
 *
 * @Target({TYPE}) @Retention(RUNTIME) public @interface Embeddable {}
 *
 *
 *
 * <p>
 * Java class for embeddable complex type.
 *
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * <pre>
 * &lt;complexType name="embeddable">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="description" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="attributes" type="{http://xmlns.jcp.org/xml/ns/persistence/orm}embeddable-attributes" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="class" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="access" type="{http://xmlns.jcp.org/xml/ns/persistence/orm}access-type" />
 *       &lt;attribute name="metadata-complete" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "embeddable", propOrder = {
    "attributes"
})
@XmlRootElement
public class Embeddable extends ManagedClass<EmbeddableAttributes> {

    protected EmbeddableAttributes attributes;

    public void load(ClassExplorer clazz) {
        Optional<ResolvedReferenceTypeDeclaration> superClassTypeOpt = clazz.getSuperClass();
        if (superClassTypeOpt.isPresent()) {
            ResolvedReferenceTypeDeclaration superClassType = superClassTypeOpt.get();
            if (superClassType.hasDirectlyAnnotation(EMBEDDABLE_FQN)) {
                Optional<Embeddable> superEmbeddableOpt = clazz.getSource().findEmbeddable(superClassType);
                if (superEmbeddableOpt.isPresent()) {
                    super.addSuperclass(superEmbeddableOpt.get());
                }
            } else {
                this.setSuperclassRef(new ReferenceClass(superClassType.getQualifiedName()));
            }
        }
        super.load(clazz);
    }

    /**
     * Gets the value of the attributes property.
     *
     * @return possible object is {@link EmbeddableAttributes }
     *
     */
    @Override
    public EmbeddableAttributes getAttributes() {
        if (attributes == null) {
            attributes = new EmbeddableAttributes();
            attributes.setJavaClass(this);
        }
        return attributes;
    }

    /**
     * Sets the value of the attributes property.
     *
     * @param value allowed object is {@link EmbeddableAttributes }
     *
     */
    @Override
    public void setAttributes(EmbeddableAttributes value) {
        this.attributes = value;
    }

    @Override
    public String getName() {
        return getClazz();
    }

    @Override
    public void setName(String name) {
        setClazz(name);
    }

}
