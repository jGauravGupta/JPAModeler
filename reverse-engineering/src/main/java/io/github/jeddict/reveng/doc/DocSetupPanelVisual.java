/**
 * Copyright 2013-2022 the original author or authors from the Jeddict project (https://jeddict.github.io/).
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package io.github.jeddict.reveng.doc;

import io.github.jeddict.collaborate.issues.ExceptionUtils;
import io.github.jeddict.jcode.util.JavaIdentifiers;
import static io.github.jeddict.jcode.util.ProjectHelper.getFolderSourceGroup;
import static io.github.jeddict.jcode.util.ProjectHelper.getJavaSourceGroups;
import static io.github.jeddict.jcode.util.ProjectHelper.getPackageForFolder;
import static io.github.jeddict.jcode.util.ProjectHelper.isFolderWritable;
import java.io.File;
import java.io.IOException;
import javax.swing.ComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.Document;
import javax.swing.text.JTextComponent;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectUtils;
import org.netbeans.api.project.SourceGroup;
import org.netbeans.modules.j2ee.persistence.wizard.fromdb.SourceGroupUISupport;
import org.netbeans.spi.java.project.support.ui.PackageView;
import org.netbeans.spi.project.ui.templates.support.Templates;
import org.openide.WizardDescriptor;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.ChangeSupport;
import static org.openide.util.NbBundle.getMessage;

public class DocSetupPanelVisual extends javax.swing.JPanel implements DocumentListener {

    private final WizardDescriptor wizard;
    private final Project project;
    private final JTextComponent packageComboBoxEditor;
    private final ChangeSupport changeSupport = new ChangeSupport(this);
    
    private final FileFilter FILE_FILTER = new ServiceFileFilter();
    private static String previousDirectory;
    
    public static final String JSON_FILE = "JSON_FILE";
    public static final String JPA_SUPPORT = "JPA_SUPPORT";
    public static final String JSONB_SUPPORT = "JSONB_SUPPORT";
    public static final String JAXB_SUPPORT = "JAXB_SUPPORT";

    /**
     * Creates new form CrudSetupPanel
     */
    public DocSetupPanelVisual(Project project, WizardDescriptor wizard) {
        this.project = project;
        this.wizard = wizard;
        initComponents();

        packageComboBoxEditor = ((JTextComponent) packageComboBox.getEditor().getEditorComponent());
        Document packageComboBoxDocument = packageComboBoxEditor.getDocument();
        packageComboBoxDocument.addDocumentListener(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerLabel = new javax.swing.JLabel();
        projectLabel = new javax.swing.JLabel();
        projectTextField = new javax.swing.JTextField();
        locationLabel = new javax.swing.JLabel();
        locationComboBox = new javax.swing.JComboBox();
        packageLabel = new javax.swing.JLabel();
        packageComboBox = new javax.swing.JComboBox();
        fileNameLabel = new javax.swing.JLabel();
        fileNameTextField = new javax.swing.JTextField();
        optionsLayeredPane = new javax.swing.JLayeredPane();
        jpaCheckBox = new javax.swing.JCheckBox();
        jsonbCheckBox = new javax.swing.JCheckBox();
        jaxbCheckBox = new javax.swing.JCheckBox();
        jsonFileLabel = new javax.swing.JLabel();
        jsonFileTextField = new javax.swing.JTextField();
        jBtnBrowse = new javax.swing.JButton();

        setName(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "LBL_Doc_Setup")); // NOI18N

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("io/github/jeddict/reveng/doc/Bundle"); // NOI18N
        headerLabel.setText(bundle.getString("MSG_Class_Diagram_Location")); // NOI18N

        projectLabel.setLabelFor(projectTextField);
        projectLabel.setText(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "LBL_Project")); // NOI18N

        projectTextField.setEditable(false);

        locationLabel.setLabelFor(locationComboBox);
        org.openide.awt.Mnemonics.setLocalizedText(locationLabel, org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "LBL_SrcLocation")); // NOI18N

        locationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationComboBoxActionPerformed(evt);
            }
        });

        packageLabel.setLabelFor(packageComboBox);
        packageLabel.setText(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "LBL_Package")); // NOI18N

        packageComboBox.setEditable(true);

        fileNameLabel.setText(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "LBL_FileName")); // NOI18N

        fileNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fileNameTextFieldKeyReleased(evt);
            }
        });

        jpaCheckBox.setText("JPA");

        jsonbCheckBox.setText("JSON-B");
        jsonbCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jsonbCheckBoxActionPerformed(evt);
            }
        });

        jaxbCheckBox.setText("JAX-B");

        optionsLayeredPane.setLayer(jpaCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);
        optionsLayeredPane.setLayer(jsonbCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);
        optionsLayeredPane.setLayer(jaxbCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout optionsLayeredPaneLayout = new javax.swing.GroupLayout(optionsLayeredPane);
        optionsLayeredPane.setLayout(optionsLayeredPaneLayout);
        optionsLayeredPaneLayout.setHorizontalGroup(
            optionsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpaCheckBox)
                .addGap(18, 18, 18)
                .addComponent(jsonbCheckBox)
                .addGap(18, 18, 18)
                .addComponent(jaxbCheckBox)
                .addContainerGap(166, Short.MAX_VALUE))
        );
        optionsLayeredPaneLayout.setVerticalGroup(
            optionsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsLayeredPaneLayout.createSequentialGroup()
                .addGap(0, 7, Short.MAX_VALUE)
                .addGroup(optionsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jpaCheckBox)
                    .addComponent(jsonbCheckBox)
                    .addComponent(jaxbCheckBox)))
        );

        jsonFileLabel.setText(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "LBL_JSONFile")); // NOI18N

        jsonFileTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jsonFileTextFieldKeyReleased(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jBtnBrowse, org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "LBL_Browse")); // NOI18N
        jBtnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headerLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(locationLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jsonFileLabel))
                    .addComponent(projectLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(packageLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileNameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optionsLayeredPane)
                    .addComponent(locationComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(projectTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(packageComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jsonFileTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnBrowse))
                    .addComponent(fileNameTextField, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headerLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectLabel)
                    .addComponent(projectTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locationLabel)
                    .addComponent(locationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(packageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(packageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(optionsLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jsonFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jsonFileLabel)
                    .addComponent(jBtnBrowse))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        headerLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "MSG_Class_Diagram_Location")); // NOI18N
        headerLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "MSG_Class_Diagram_Location")); // NOI18N
        projectLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "LBL_Project")); // NOI18N
        projectLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "LBL_Project")); // NOI18N
        projectTextField.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "ACSD_Project")); // NOI18N
        locationLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "LBL_SrcLocation")); // NOI18N
        locationLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "LBL_SrcLocation")); // NOI18N
        locationComboBox.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "ACSD_Location")); // NOI18N
        packageLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "LBL_Package")); // NOI18N
        packageLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "LBL_Package")); // NOI18N
        packageComboBox.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "ACSD_Package")); // NOI18N
        fileNameTextField.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "ACSD_FileName")); // NOI18N
        jsonFileTextField.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(DocSetupPanelVisual.class, "ACSD_JSONFile")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void locationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationComboBoxActionPerformed
        locationChanged();
    }//GEN-LAST:event_locationComboBoxActionPerformed

    private void fileNameTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileNameTextFieldKeyReleased
        changeSupport.fireChange();
    }//GEN-LAST:event_fileNameTextFieldKeyReleased

    private void jsonbCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jsonbCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jsonbCheckBoxActionPerformed

    private void jsonFileTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jsonFileTextFieldKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jsonFileTextFieldKeyReleased

    private void jBtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBrowseActionPerformed
        JFileChooser chooser = new JFileChooser(previousDirectory);
        chooser.setMultiSelectionEnabled(false);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.addChoosableFileFilter(FILE_FILTER);
        chooser.setFileFilter(FILE_FILTER);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File wsdlFile = chooser.getSelectedFile();
            jsonFileTextField.setText(wsdlFile.getAbsolutePath());
            previousDirectory = wsdlFile.getPath();
        }
    }//GEN-LAST:event_jBtnBrowseActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JTextField fileNameTextField;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JButton jBtnBrowse;
    private javax.swing.JCheckBox jaxbCheckBox;
    private javax.swing.JCheckBox jpaCheckBox;
    private javax.swing.JLabel jsonFileLabel;
    private javax.swing.JTextField jsonFileTextField;
    private javax.swing.JCheckBox jsonbCheckBox;
    private javax.swing.JComboBox locationComboBox;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JLayeredPane optionsLayeredPane;
    private javax.swing.JComboBox packageComboBox;
    private javax.swing.JLabel packageLabel;
    private javax.swing.JLabel projectLabel;
    private javax.swing.JTextField projectTextField;
    // End of variables declaration//GEN-END:variables

    public void addChangeListener(ChangeListener listener) {
        changeSupport.addChangeListener(listener);
    }

    boolean valid(WizardDescriptor wizard) {
        String fileName = getFileName();
        if (fileName.trim().equals("")) { // NOI18N
            wizard.putProperty("WizardPanel_errorMessage", getMessage(DocSetupPanelVisual.class, "ERR_JavaTargetChooser_CantUseEmptyFileName"));
            return false;
        }

        String packageName = getPackage();
        if (packageName.trim().equals("")) { // NOI18N
            wizard.putProperty("WizardPanel_errorMessage", getMessage(DocSetupPanelVisual.class, "ERR_JavaTargetChooser_CantUseDefaultPackage"));
            return false;
        }

        if (!JavaIdentifiers.isValidPackageName(packageName)) {
            wizard.putProperty("WizardPanel_errorMessage", getMessage(DocSetupPanelVisual.class, "ERR_JavaTargetChooser_InvalidPackage")); //NOI18N
            return false;
        }

        if (!isFolderWritable(getLocationValue(), packageName)) {
            wizard.putProperty("WizardPanel_errorMessage", getMessage(DocSetupPanelVisual.class, "ERR_JavaTargetChooser_UnwritablePackage")); //NOI18N
            return false;
        }
        
        String jsonFileLocation = jsonFileTextField.getText().trim();
        File jsonFile = new File(jsonFileLocation);
        if (jsonFileLocation.length() == 0) {
            wizard.putProperty("WizardPanel_errorMessage", getMessage(DocSetupPanelVisual.class, "EMPTY_FILE"));
        } else if (!jsonFile.exists()) {
            wizard.putProperty("WizardPanel_errorMessage", getMessage(DocSetupPanelVisual.class, "INVALID_FILE_NOT_FOUND"));
        } else if (!jsonFile.isFile()) {
            wizard.putProperty("WizardPanel_errorMessage", getMessage(DocSetupPanelVisual.class, "INVALID_FILE_NOT_FILE"));
        }

//            try {
//                URL url = new URL(urlText);
//
//                if (group.serviceExists(urlText)) {
//                    setErrorMessage(getMessage(AddWebServiceDlg.class, "SERVICE_ALREADY_EXISTS_FOR_URL"));
//                } else {
//                    setErrorMessage(defaultMsg);
//                }
//            } catch (MalformedURLException ex) {
//                setErrorMessage(getMessage(AddWebServiceDlg.class, "INVALID_URL"));
//            }       
        
        wizard.putProperty("WizardPanel_errorMessage", ""); // NOI18N
        return true;
    }

    public SourceGroup getLocationValue() {
        return (SourceGroup) locationComboBox.getSelectedItem();
    }

    public String getFileName() {
        return fileNameTextField.getText();
    }

    public String getPackage() {
        return packageComboBoxEditor.getText();
    }

    private void locationChanged() {
        updateSourceGroupPackages();
//        changeSupport.fireChange();
    }

    void read(WizardDescriptor settings) {
        FileObject targetFolder = Templates.getTargetFolder(settings);
        projectTextField.setText(ProjectUtils.getInformation(project).getDisplayName());
        SourceGroup[] sourceGroups = getJavaSourceGroups(project);
        SourceGroupUISupport.connect(locationComboBox, sourceGroups);
        packageComboBox.setRenderer(PackageView.listRenderer());
        updateSourceGroupPackages();

        // set default source group and package cf. targetFolder
        if (targetFolder != null) {
            SourceGroup targetSourceGroup = getFolderSourceGroup(sourceGroups, targetFolder);
            if (targetSourceGroup != null) {
                locationComboBox.setSelectedItem(targetSourceGroup);
                String targetPackage = getPackageForFolder(targetSourceGroup, targetFolder);
                if (targetPackage != null) {
                    packageComboBoxEditor.setText(targetPackage);
                }
            }
        }
    }

    void store(WizardDescriptor settings) {
        String pkg = getPackage();
        try {
            FileObject fo = null;
            if (getLocationValue() != null) {
                fo = getLocationValue().getRootFolder();
            }
            if(fo==null){
                FileObject targetFolder = Templates.getTargetFolder(settings);
                if (targetFolder != null) {
                    SourceGroup targetSourceGroup = getFolderSourceGroup(targetFolder);
                    fo = targetSourceGroup.getRootFolder();
                }
            }
            String pkgSlashes = pkg.replace('.', '/');
            FileObject targetFolder = fo.getFileObject(pkgSlashes);
            if (targetFolder == null) {
                targetFolder = FileUtil.createFolder(fo, pkgSlashes);
            }
            Templates.setTargetFolder(settings, targetFolder);
            Templates.setTargetName(wizard, this.getFileName());
            
            wizard.putProperty(JSON_FILE, jsonFileTextField.getText().trim());
            wizard.putProperty(JPA_SUPPORT, jpaCheckBox.isSelected());
            wizard.putProperty(JSONB_SUPPORT, jsonbCheckBox.isSelected());
            wizard.putProperty(JAXB_SUPPORT, jaxbCheckBox.isSelected());
            
        } catch (IOException ex) {
            ExceptionUtils.printStackTrace(ex);
        }
    }

    private void updateSourceGroupPackages() {
        SourceGroup sourceGroup = (SourceGroup) locationComboBox.getSelectedItem();
        ComboBoxModel model = PackageView.createListView(sourceGroup);
        if (model.getSelectedItem() != null && model.getSelectedItem().toString().startsWith("META-INF")
                && model.getSize() > 1) { // NOI18N
            model.setSelectedItem(model.getElementAt(1));
        }
        packageComboBox.setModel(model);
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        changeSupport.fireChange();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        changeSupport.fireChange();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        changeSupport.fireChange();
    }

      private static class ServiceFileFilter extends javax.swing.filechooser.FileFilter {

          public static final String[] SUPPORTED_EXTENSIONS = {"json", "JSON", "xml", "XML", "yaml", "YAML", "yml", "YML"};

        @Override
        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }

            String ext = FileUtil.getExtension(f.getName());
            for (String SUPPORTED_EXTENSION : SUPPORTED_EXTENSIONS) {
                if (SUPPORTED_EXTENSION.equalsIgnoreCase(ext)) {
                    return true;
                }
            }

            return false;
        }

        @Override
        public String getDescription() {
            return getMessage(DocSetupPanelVisual.class, "LBL_DocFilterDescription"); // NOI18N
        }
    }

}
